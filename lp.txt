1-.

#!/usr/bin/perl
# your code goes here

use strict;
use warnings;
use 5.010


sub init{
   
    my $contador;

    sub incrementar {
	$local
        $contador++;
    }
   

}


2-.

(defvar regular 5)
(print regular)
(setq regular 6)
(print regular)

(defvar tmp 2)
(print tmp)
(defvar tmp 8)
(print tmp)


3-.

function fun2(num2){
		var dentro = num2 + 2;
		console.log ("valor de dentro en fun2 ", dentro);
		fun3(dentro);
}


function fun3(num3){
		var dentro = num3 + 10;
		console.log ("valor de dentro en fun3" , dentro);
}


function fun1(num1){
	var dentro = 0;
	dentro = num1;
	fun2(dentro);
	dentro =  50;
	console.log("valor dentro fuera de las subfunciones" , dentro);
}

fun1(5);

"valor de dentro en fun2 " 7
"valor de dentro en fun3" 17
"valor dentro fuera de las subfunciones" 50


4-.

def fun2(num2):
		num2 = num2 + 2
		dentro = num2
		print "valor de dentro en fun2 ", dentro
		fun3(dentro)


def fun3(num3):
		dentro = num3 + 10
		print " valor de dentro en fun3" , dentro


def fun1(num1):
	dentro = 0
	dentro = num1
	fun2(dentro)
	dentro =  50
	print "valor dentro fuera de las subfunciones" , dentro

fun1(5)

valor de dentro en fun2  7
valor de dentro en fun3 17
valor dentro fuera de las subfunciones 50


5-.


	C: 	"error: 'x' undeclared" la variable se determina como irreconocida al no tener un tipo, retornando un error 
	C++: 	"error: 'x' was not declared in this scope" la variable se determina como irreconocida al no tener un tipo, retornando un error 
	Java: 	"cannot find symbol" la variable no se reconoce al no tener tipo definido retornando error 

6 -.

----C# y c++

int j = 0;
for(int i  = 0; i < 5; i++){
	int prueba;
	j = i;
	prueba = j;
}

cout<< prueba;
cout<< j;

--C++

prog.cpp:13:8: error: 'prueba' was not declared in this scope


--C#
prog.cs(15,22): error CS0103: The name `prueba' does not exist in the current context


---java---

int j = 0;
for(int i  = 0; i < 5; i++){
	int prueba;
	j = i;
	prueba = j;
}

system.out.printf(prueba);
system.out.printf(j);

Main.java:20: error: cannot find symbol

7-.



void crea_listaEst(){
	int listest[100000];
}

void crea_listaDyn(){
	int* listDyn = new int [100000];
}

int main() {
	
	for(int i = 0; i < 100000; i++){
		crea_listaEst();
		
	}
	return 0;
}

// En Stack no existe problema ya que es variable estatica, al momento de compilar, el compilador sabe cuanta pedir al SO para hacer la reserva 


int main() {
	
	for(int i = 0; i < 100000; i++){
		crea_listaDyn();
		
	}
	return 0;
}




terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc

std::bad_alloc es una excepcion que indica que nos quedamos sin memoria

// Esto error sucede porque estamos pidiendo mas memoria de la que tenemos,al ser una variable dinamica se almacena en el Heap,
 lo que sucede es que el compilador le pide al SO que de memoria para almacenar pero no liberamos memoria, si bien la memoria en Heap puede crecer tiene un tamaño limitado,
 una solucion seria apenas dejemos de usar la variable dinamica,
 eliminarla de memoria para liberarla

